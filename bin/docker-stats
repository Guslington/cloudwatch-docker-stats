#!/usr/bin/env ruby

require 'docker'
require 'aws-sdk'
require 'logger'

$logger = Logger.new(STDOUT)
$logger.level = Logger::INFO
if ENV['LOG_VEBOSE'] == 'true'
  $logger.level = Logger::DEBUG
end

def main
  containers = ENV['CONTAINERS'].split(',') || [] # Commama delimeted string of containers to monitor
  environment_name = ENV['ENVIRONMENT'] || nil

  cw_region = ENV['CLOUDWATCH_REGION'] || 'ap-southeast-2'
  cw_namespace = ENV['CLOUDWATCH_NAMESPACE'] || 'Docker'
  cw_interval = ENV['CLOUDWATCH_INTERVAL_SEC'] || 5*60

  Aws.config.update({region: cw_region})
  cw_client = Aws::CloudWatch::Client.new()

  $logger.info("Starting CloudWatch docker stats collector")

  while true
    metric_data =[]
    containers.each do |container|
      container_info = get_container_info(container)
      status = (container_info ? get_container_status(container,container_info) : 0)
      metric_data << create_metric_data(container, status, container_info, environment_name)
    end
    publish_docker_stats(cw_client, cw_namespace, metric_data)
    sleep cw_interval.to_i
  end

end

def get_container_info(container)
  begin
    Docker::Container.get(container).info
  rescue Docker::Error::NotFoundError
    $logger.warn("No such container: #{container}")
    return false
  end
end

def get_container_status(container,container_info)
  $logger.debug("#{container} status: #{container_info['State']['Status']}")
  container_info['State']['Running'] == true ? 1 : 0
end

def publish_docker_stats(cw_client, namespace, metic_data)
  batch_count = 0
  metic_data.each_slice(20) do |batch|
    put_metric_params = Aws::CloudWatch::Types::PutMetricDataInput.new({
      'namespace' => namespace,
      'metric_data' => batch
    })
    $logger.info("putting cloudwatch metric data batch  #{batch.size + (batch_count * batch.size)} of #{metic_data.size}")
    $logger.debug { "metic_data:#{batch}" }
    cw_client.put_metric_data(put_metric_params)
    batch_count = batch_count + 1
  end

end

def create_metric_data(container, status, container_info, environment_name=nil)
  dimensions = [{name: 'Container', value: container}]
  dimensions << {name: 'Environment', value: environment_name} unless environment_name.nil?
  Aws::CloudWatch::Types::MetricDatum.new({ metric_name: 'Status', value: status, dimensions: dimensions })
end

main
